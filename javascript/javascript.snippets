# Functions

# prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} = function(${3}) {
		${0}
	};
# Function
snippet fun
	function ${1:function_name}(${2}) {
		${0}
	}
# Anonymous Function
snippet f
	function(${1}) {
		${0}
	}
# Function assigned to variable
snippet vf
	var ${1:function_name} = function $1(${2}) {
		${0}
	};
# Immediate function
snippet (f
	(function(${1}) {
		${0}
	}(${2}));
# self-defining function
snippet sdf
	var ${1:function_name} = function (${2:argument}) {
		${3}

		$1 = function ($2) {
			${0}
		};
	};

# Flow control

# if
snippet if
	if (${1:true}) {
		${0}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${0}
	}
# tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}
# case
snippet case
	case '${1:case}':
		${2}
		break;
	${0}
# try
snippet try
	try {
		${1}
	} catch (${2:e}) {
		${0:/* handle error */}
	}
# return
snippet ret
	return ${0:result};

# Loops

# for loop
snippet for
	for (var ${2:i} = 0, l = ${1:arr}.length; $2 < l; $2 ++) {
		var ${3:v} = $1[$2];${0:}
	}
# Reversed for loop
snippet forr
	for (var ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2 --) {
		var ${3:v} = $1[$2];${0:}
	}
# While loop
snippet wh
	while (${1:/* condition */}) {
		${0}
	}
# Do while loop
snippet do
	do {
		${0}
	} while (${1:/* condition */});
# For in loop
snippet fori
	for (var ${1:prop} in ${2:object}) {
		${0:$2[$1]}
	}

# Objects

# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}) {
		${0}
	}${3:,}
# hasOwnProperty
snippet has
	hasOwnProperty(${0})
# singleton
snippet sing
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};

		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${0}

		return instance;
	}
# Crockford's object function
snippet obj
	function object(o) {
		function F() {}
		F.prototype = o;
		return new F();
	}
# Define multiple properties
snippet props
	var ${1:my_object} = Object.defineProperties(
		${2:new Object()},
		{
			${3:property} : {
				get : function $1_$3_getter() {
					// getter code
				},
				set : function $1_$3_setter(value) {
					// setter code
				},
				value        : ${4:value},
				writeable    : ${5:boolean},
				enumerable   : ${6:boolean},
				configurable : ${0:boolean}
			}
		}
	);
# Define single property
snippet prop
	Object.defineProperty(
		${1:object},
		'${2:property}',
		{
			get : function $1_$2_getter() {
				// getter code
			},
			set : function $1_$2_setter(value) {
				// setter code
			},
			value        : ${3:value},
			writeable    : ${4:boolean},
			enumerable   : ${5:boolean},
			configurable : ${0:boolean}
		}
	);

# Documentation

# docstring
snippet /**
	/**
	 * ${0:description}
	 *
	 */
snippet @par
	@param {${1:type}} ${2:name} ${0:description}
snippet @ret
	@return {${1:type}} ${0:description}

# JSON

# JSON.parse
snippet jsonp
	JSON.parse(${0:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${0:object});

# DOM selectors

# Get elements
snippet get
	getElementsBy${1:TagName}('${0}')
# Get element
snippet gett
	getElementBy${1:Id}('${0}')
# Elements by class
snippet by.
	${1:document}.getElementsByClassName('${0:class}')
# Element by ID
snippet by#
	${1:document}.getElementById('${0:element ID}')
# Query selector
snippet qs
	${1:document}.querySelector('${0:CSS selector}')
# Query selector all
snippet qsa
	${1:document}.querySelectorAll('${0:CSS selector}')

# Debugging

# console.log
snippet cl
	console.log(${0});
# console.debug
snippet cd
	console.debug(${0});
# console.trace
snippet ct
	console.trace(${0:label});
# console.time
snippet ctime
	console.time(${0:label});
# console.assert
snippet ca
	console.assert(${1:expression}, ${0:obj});
# console.dir
snippet cdir
	console.dir(${0:obj});

# Misc

# setTimeout function
snippet timeout
	setTimeout(function () {${0}}${2}, ${1:10});

snippet cs
	var cx = React.addons.classSet;
snippet cdm
	componentDidMount: function() {
		${1}
	},
snippet cdup
	componentDidUpdate: function(prevProps, prevState) {
		${1}
	},
snippet cwm
	componentWillMount: function() {
		${1}
	},
snippet cwr
	componentWillReceiveProps: function(nextProps) {
		${1}
	},
snippet cwun
	componentWillUnmount: function() {
		${1}
	},
snippet cwu
	componentWillUpdate: function(nextProps, nextState) {
		${1}
	},
snippet cx
	cx({
		${1}: ${2}
	});
snippet fup
	forceUpdate(${1:callback});
snippet gdp
	getDefaultProps: function() {
		return {
			${1}
		};
	},
snippet gis
	getInitialState: function() {
		return {
			${1}: ${2}
		};
	},
snippet ism
	isMounted()
snippet jsx
	/**
	 * @jsx React.DOM
	 */
snippet pt
	propTypes: {
		${1}: React.PropTypes.${2:string}
	},
snippet rcc
	/**
	 * @jsx React.DOM
	 */

	var React = require('react');

	var ${1:ClassName} = React.createClass({

		render: function() {
			return (
				${0:<div />}
			);
		}

	});
snippet ren
	render: function() {
		return (
			${1:<div />}
		);
	}
snippet sst
	setState({
		${1}: ${2}
	});
snippet scu
	shouldComponentUpdate: function(nextProps, nextState) {
		${1}
	},
snippet props
	this.props.${1}
snippet state
	this.state.${1}
snippet trp
	transferPropsTo(${1});
snippet fluxa
	var AppDispatcher = require('${1:../dispatcher/AppDispatcher}');
	var AppConstants = require('${2:../constants/AppConstants'});
	var $ = require("jquery");
	var util = require("../../extra/util");

	var Actions = {
	  reloadGrid: function (params) {
		AppDispatcher.handleViewAction({
		  actionType: AppConstants.FINANCE_RECEIVABLES_CONFIRM_RELOAD_GRID,
		  params: params
		});
	  },
	  noop: function(){}
	};

	module.exports = Actions;

snippet fluxv
	/** @jsx React.DOM **/
	var React = require("react");
	var AppConstants = require('../../constants/AppConstants');
	var SmartAdminBox = require("../../rc-component/smart_admin_box");
	var JqGrid = require("../../rc-component/rc-jqgrid");
	var Actions = require("../../actions/FinanceReceivablesConfirmAction");
	var Store = require("../../stores/FinanceReceivablesConfirmStore");
	var util = require("../../extra/util");

	var App = React.createClass({
	  getInitialState: function() {
		return {
		  selected: []
		};
	  },
	  componentWillMount: function() {
		Store.addListener( AppConstants.FINANCE_RECEIVABLES_CONFIRM_EVENT, this._onChange );
	  },
	  _onChange: function() {
		this.setState({
		  selected: Store.getSelected(),
		  noop: null
		});
	  },
	  render: function() {
		var config = Store.getJqconfig();
		var gridId = Store.getJqgridId();
		return (
		  <div className="row">
			<SmartAdminBox title={"收款单列表"}>
			  <JqGrid  config={config} grid_id={gridId} jqAction="finance_receivables_confirm" />
			</SmartAdminBox>
		  </div>
		);
	  }
	});

	React.render(<App />, document.getElementById('widget-grid'));

snippet fluxs
	var AppDispatcher = require('../dispatcher/AppDispatcher');
	var AppConstants = require('../constants/AppConstants');
	var $ = require('jquery');
	var rcUtil = require('rc-util');
	require("../extra/string.formart");

	var objectAssign = require('object-assign');
	var EventEmitter = require('events').EventEmitter; // 取得一個 pub/sub 廣播器
	var Store = {};
	var selected = [];
	var params = {};
	var jqgridId = rcUtil.guid();


	objectAssign( Store, EventEmitter.prototype, {
	  getJqconfig: function () {
		return config;
	  },
	  getJqgridId: function () {
		return jqgridId;
	  },
	  getSelected: function () {
		return selected;
	  },
	  noop: null
	});

	var getGrid = function () {
	  return $("#" + jqgridId).jqGrid();
	};
	var reloadJqGrid = function () {
	  getGrid().setGridParam({postData: params}).trigger("reloadGrid");
	};

	var config = {
	  url: "/finance/order_invoice_list.json",
	  datatype: "JSON",
	  postData: params,
	  height: 'auto',
	  colNames: ["单号", "发票号", "项目", "联系人", "线路名称", "金额", "状态", "确认时间"],
	  colModel: [
		{name: 'bill_no'},
		{name: 'print_invoice_no'},
		{name: 'subject'},
		{name: 'contact_name', sortable: false},
		{name: 'product_name', sortable: false},
		{name: 'amount', sortable: false},
		{name: 'status'},
		{name: "received_time"}
	  ],
	  rowNum: 10,
	  rowList: [10, 50, 100],
	  autowidth: true,
	  sortname: 'id',
	  sortorder: "asc",
	  shrinkToFit: false,
	  multiselect: true,
	  viewrecords: true,
	  onSelectRow: function (id, is_check) {
		selected = getGrid().getGridParam("selarrrow");
		Store.emit( AppConstants.FINANCE_RECEIVABLES_CONFIRM_EVENT );
	  },
	  onSelectAll: function (ids, is_check) {
		selected = getGrid().getGridParam("selarrrow");
		Store.emit( AppConstants.FINANCE_RECEIVABLES_CONFIRM_EVENT );
	  },
	  gridComplete: function () {
		var grid = getGrid();
		var ids = grid.getDataIDs();
		$.each(selected, function (index, select) {
		  if(ids.indexOf(select) == -1) {
			selected.splice(selected.indexOf(select), 1);
		  }
		  grid.setSelection(select);
		})
		Store.emit( AppConstants.FINANCE_RECEIVABLES_CONFIRM_EVENT );
	  }
	}
	Store.dispatchToken = AppDispatcher.register( function eventHandlers(evt) {
	  var action = evt.action;
	  switch (action.actionType) {
		case AppConstants.FINANCE_RECEIVABLES_CONFIRM_RELOAD_GRID:
		  if(action.params) { params = $.extend(params, action.params) }
		  reloadJqGrid();
		  Store.emit( AppConstants.FINANCE_RECEIVABLES_CONFIRM_EVENT );
		default:
	  }
	});

	module.exports = Store;

